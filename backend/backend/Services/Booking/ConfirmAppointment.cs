using MongoDB.Driver;
using Microsoft.Extensions.Options;
using backend.Data;
using backend.Models.Entities;
using backend.Models.Entities.Booking;
using backend.Settings;
using backend.Models.Entities.Doctor;
using backend.Services; // Namespace ch·ª©a IEmailService (n·∫øu kh√°c, ch·ªânh l·∫°i cho ƒë√∫ng)

namespace backend.Services
{
    public class ConfirmAppointmentService
    {
        private readonly IMongoCollection<ConfirmAppointment> _confirmAppointmentCollection;

        private readonly IMongoCollection<Doctor> _doctorCollection; // <<< TH√äM L·∫†I D√íNG N√ÄY
        private readonly IMongoCollection<backend.Models.Entities.User> _userCollection;
        private readonly IWebHostEnvironment _env;
        private readonly IEmailService _emailService;


        public ConfirmAppointmentService(IOptions<MongoDbSettings> mongoDbSettings, IWebHostEnvironment env, IEmailService emailService)
        {
            var mongoClient = new MongoClient(mongoDbSettings.Value.ConnectionString);
            var mongoDatabase = mongoClient.GetDatabase(mongoDbSettings.Value.DatabaseName);
            _userCollection = mongoDatabase.GetCollection<backend.Models.Entities.User>(mongoDbSettings.Value.UserCollectionName);

            _confirmAppointmentCollection = mongoDatabase
                .GetCollection<ConfirmAppointment>(mongoDbSettings.Value.ConfirmAppointmentCollectionName);
            _doctorCollection = mongoDatabase.GetCollection<Doctor>(mongoDbSettings.Value.DoctorCollectionName);
            _emailService = emailService; // üëà G√°n v√†o field
            _env = env;
        }

        // ‚úÖ T·∫°o l·ªãch h·∫πn m·ªõi
        public async Task CreateAppointmentAsync(ConfirmAppointment appointment)
        {
            appointment.CreatedAt = DateTime.UtcNow;
            appointment.UpdatedAt = DateTime.UtcNow;
            await _confirmAppointmentCollection.InsertOneAsync(appointment);

            // ‚úÖ G·ª≠i email x√°c nh·∫≠n
            // var subject = "X√°c nh·∫≠n l·ªãch h·∫πn th√†nh c√¥ng";
            // var message = $@"
            // <h3>Xin ch√†o {appointment.PatientName},</h3>
            // <p>B·∫°n ƒë√£ ƒë·∫∑t l·ªãch h·∫πn v·ªõi b√°c sƒ© <strong>{appointment.NameDr}</strong> th√†nh c√¥ng.</p>
            // <p><strong>Th·ªùi gian:</strong> {appointment.Date.ToString("dd/MM/yyyy")} - {appointment.Slot}</p>
            // <p><strong>Chuy√™n khoa:</strong> {appointment.SpecialtyName}</p>
            // <p><strong>Tri·ªáu ch·ª©ng:</strong> {appointment.Symptoms}</p>
            // <p><strong>Ph√≠ kh√°m:</strong> {appointment.ConsultationFee.ToString("N0")} VNƒê</p>
            // <br/>
            // <p>Tr√¢n tr·ªçng,<br/>Ph√≤ng kh√°m c·ªßa ch√∫ng t√¥i.</p>"
            // ;


            await _emailService.SendBookingConfirmationEmailAsync(
     appointment.PatientEmail,
     patientName: appointment.PatientName,
     doctorName: appointment.NameDr,
     bookingDate: appointment.Date,
     timeSlot: appointment.Slot,
     symptoms: appointment.Symptoms,
     consultationFee: appointment.ConsultationFee
 );


        }

        // ‚úÖ Ki·ªÉm tra xem slot ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ch∆∞a
        public async Task<bool> IsSlotTakenAsync(string doctorId, DateTime date, string slot)
        {
            var filter = Builders<ConfirmAppointment>.Filter.Eq(a => a.DoctorId, doctorId) &
                        Builders<ConfirmAppointment>.Filter.Eq(a => a.Date, date.Date) &
                        Builders<ConfirmAppointment>.Filter.Eq(a => a.Slot, slot);
            return await _confirmAppointmentCollection.Find(filter).AnyAsync();
        }

        // ‚úÖ L·∫•y to√†n b·ªô l·ªãch h·∫πn c·ªßa m·ªôt b√°c sƒ© theo doctorId
        public async Task<List<ConfirmAppointment>> GetAppointmentsByDoctorIdAsync(string doctorId)
        {
            var filter = Builders<ConfirmAppointment>.Filter.Eq(a => a.DoctorId, doctorId);
            return await _confirmAppointmentCollection.Find(filter).ToListAsync();
        }

        // ‚úÖ L·∫•y danh s√°ch l·ªãch h·∫πn theo b√°c sƒ© v√† ng√†y (tu·ª≥ ch·ªçn m·ªü r·ªông)
        public async Task<List<ConfirmAppointment>> GetAppointmentsByDoctorAndDateAsync(string doctorId, DateTime date)
        {
            var filter = Builders<ConfirmAppointment>.Filter.Eq(a => a.DoctorId, doctorId) &
                        Builders<ConfirmAppointment>.Filter.Eq(a => a.Date, date.Date);
            return await _confirmAppointmentCollection.Find(filter).ToListAsync();
        }

        // ‚úÖ Ki·ªÉm tra b·ªánh nh√¢n ƒë√£ ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© ƒë√≥, ng√†y ƒë√≥, slot ƒë√≥ ch∆∞a
        public async Task<bool> CheckPatientBookingAsync(string patientId, string doctorId, DateTime date, string slot)
        {
            var filter = Builders<ConfirmAppointment>.Filter.Eq(a => a.PatientId, patientId) &
                        Builders<ConfirmAppointment>.Filter.Eq(a => a.DoctorId, doctorId) &
                        Builders<ConfirmAppointment>.Filter.Eq(a => a.Date, date.Date) &
                        Builders<ConfirmAppointment>.Filter.Eq(a => a.Slot, slot);

            return await _confirmAppointmentCollection.Find(filter).AnyAsync();
        }

        // ... (c√°c h√†m kh√°c) ...

        // ‚úÖ Ki·ªÉm tra xem b·ªánh nh√¢n ƒë√£ ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© n√†y trong ng√†y c·ª• th·ªÉ ch∆∞a
        public async Task<bool> HasPatientBookedWithDoctorOnDateAsync(string patientId, string doctorId, DateTime date)
        {
            var startOfDay = date.Date; // L·∫•y ph·∫ßn ng√†y, b·ªè qua gi·ªù ph√∫t gi√¢y
            var endOfDay = startOfDay.AddDays(1).AddTicks(-1); // K·∫øt th√∫c c·ªßa ng√†y ƒë√≥

            var filter = Builders<ConfirmAppointment>.Filter.Eq(a => a.PatientId, patientId) &
                        Builders<ConfirmAppointment>.Filter.Eq(a => a.DoctorId, doctorId) &
                        Builders<ConfirmAppointment>.Filter.Gte(a => a.Date, startOfDay) & // L·ªõn h∆°n ho·∫∑c b·∫±ng ƒë·∫ßu ng√†y
                        Builders<ConfirmAppointment>.Filter.Lte(a => a.Date, endOfDay);   // Nh·ªè h∆°n ho·∫∑c b·∫±ng cu·ªëi ng√†y

            return await _confirmAppointmentCollection.Find(filter).AnyAsync();
        }

        // Trong ConfirmAppointmentService.cs - th√™m logging chi ti·∫øt
        // File: backend/Services/Booking/ConfirmAppointmentService.cs

        public async Task<bool> UpdateAppointmentStatusByOrderCodeAsync(long orderCode, string newStatus)
        {
            var filter = Builders<ConfirmAppointment>.Filter.Eq(a => a.OrderCode, orderCode);

            // Ki·ªÉm tra xem appointment c√≥ t·ªìn t·∫°i v√† ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t kh√¥ng
            var existingAppointment = await _confirmAppointmentCollection.Find(filter).FirstOrDefaultAsync();
            if (existingAppointment == null || existingAppointment.Status == newStatus)
            {
                // Ghi log ƒë·ªÉ bi·∫øt t·∫°i sao kh√¥ng c·∫≠p nh·∫≠t
                if (existingAppointment == null)
                    Console.WriteLine($"[INFO] Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn v·ªõi OrderCode: {orderCode}");
                else
                    Console.WriteLine($"[INFO] L·ªãch h·∫πn {orderCode} ƒë√£ ·ªü tr·∫°ng th√°i {newStatus}.");

                return false; // Kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t
            }

            var update = Builders<ConfirmAppointment>.Update
                .Set(a => a.Status, newStatus)
                .Set(a => a.UpdatedAt, DateTime.UtcNow);

            var result = await _confirmAppointmentCollection.UpdateOneAsync(filter, update);

            if (result.IsAcknowledged && result.ModifiedCount > 0)
            {
                // N·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng v√† tr·∫°ng th√°i l√† PAID, g·ª≠i email x√°c nh·∫≠n
                if (newStatus == PaymentStatus.PAID)
                {
                    try
                    {
                        // ‚úÖ S·ª¨A L·ªñI: G·ªåI ƒê√öNG H√ÄM EMAIL "SendBookingConfirmationEmailAsync"
                        // H√†m n√†y kh√¥ng y√™u c·∫ßu paymentUrl.
                        await _emailService.SendBookingConfirmationEmailAsync(
                            patientEmail: existingAppointment.PatientEmail,
                            patientName: existingAppointment.PatientName, // S·∫Ω d√πng t√™n t·ª´ DB
                            doctorName: existingAppointment.NameDr,
                            bookingDate: existingAppointment.Date,
                            timeSlot: existingAppointment.Slot,
                            symptoms: existingAppointment.Symptoms,
                            consultationFee: existingAppointment.ConsultationFee
                        );
                        Console.WriteLine($"[INFO] ƒê√£ g·ª≠i email x√°c nh·∫≠n thanh to√°n cho OrderCode: {orderCode}");
                    }
                    catch (Exception emailEx)
                    {
                        // Ghi log n·∫øu g·ª≠i email th·∫•t b·∫°i, nh∆∞ng kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£ c·∫≠p nh·∫≠t
                        Console.WriteLine($"[WARNING] G·ª≠i email x√°c nh·∫≠n th·∫•t b·∫°i cho OrderCode {orderCode}. L·ªói: {emailEx.Message}");
                    }
                }
                return true;
            }

            return false;
        }
    }
}
